FUNCTION_BLOCK text	// Block definition (there may be more than one block per file)

VAR_INPUT				// Define input variables
	speed : REAL;	
	rainny : REAL;
	
END_VAR

VAR_OUTPUT				// Define output variable
      punishement : REAL;
      reward : REAL;
END_VAR

FUZZIFY speed		
    TERM vl :=(0,1)(30,0);
	TERM l := (20, 0) (35,1)(50,0) ; 
	TERM m  :=(40,0)(60,1)(80,0);
	TERM h := (70, 0) (100,1) (120,0) ;
	TERM vh := (120, 0) (140,1) (180,0);
	
END_FUZZIFY

FUZZIFY rainny			 
	TERM l := (0,0) (3, 1) (6,0) ;
	TERM m:= (5,0) (8,1)(10,0);
	TERM h:= (9,0) (13,1)(15,0);
END_FUZZIFY

  
DEFUZZIFY punishement			
	TERM vl := (0,0) (500,1) (1520,0);
	TERM l := (1000,0)(1500,1) (3000,0) ;
	TERM m :=(2500,0) (3000,1) (4000,0) ;
	TERM h := (3500,0) (4000,1) (6000,1)(7000,0);
	TERM vh := (6500,0) (7500,1) (9000,1)(10000,0);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY
DEFUZZIFY reward			
	
	TERM vl := (0,0) (500,1) (1520,0);
	TERM l := (1000,0)(1500,1) (3000,0) ;
	TERM m :=(2500,0) (3000,1) (4000,0) ;
	TERM h := (3500,0) (4000,1) (6000,1)(7000,0);
	TERM vh := (6500,0) (7500,1) (9000,1)(10000,0);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

RULEBLOCK No1
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'max' accumulation method
	
	
	
	
	RULE 1 : IF (speed IS vh) AND (rainny IS l)  THEN  punishement IS vh;
	RULE 2 : IF (speed IS vh) AND (rainny IS m)  THEN   punishement IS vh;
	RULE 3 : IF (speed IS vh) AND  (rainny IS h)  THEN   punishement IS vh;
	RULE 4 : IF (speed IS h) AND (rainny IS l)  THEN   punishement IS h;
	RULE 5 : IF (speed IS h) AND (rainny IS m)  THEN   punishement IS vh;
	RULE 6 : IF (speed IS h) AND  (rainny IS h)  THEN   punishement IS vh;
	RULE 7 : IF (speed IS m) AND (rainny IS l)  THEN   punishement IS m;
	RULE 8 : IF (speed IS m) AND (rainny IS m)  THEN   punishement IS h;
	RULE 9 : IF (speed IS m) AND  (rainny IS h)  THEN   punishement IS h;
	RULE 10 : IF (speed IS l) AND (rainny IS l)  THEN   punishement IS vl;
	RULE 11 : IF (speed IS l) AND (rainny IS m)  THEN   punishement IS vl;
	RULE 12 : IF (speed IS l) AND  (rainny IS h)  THEN     punishement IS vl;
	RULE 13 : IF (speed IS vl) AND (rainny IS l)  THEN     punishement IS vl;
	RULE 14 : IF (speed IS vl) AND (rainny IS m)  THEN    punishement IS vl;
	RULE 15 : IF (speed IS vl) AND  (rainny IS h)  THEN    punishement IS vl;
	
        RULE 16 : IF (speed IS vh) AND (rainny IS l)  THEN  reward IS vl;
	RULE 17 : IF (speed IS vh) AND (rainny IS m)  THEN   reward IS vl;
	RULE 18 : IF (speed IS vh) AND  (rainny IS h)  THEN   reward IS vl;
	RULE 19 : IF (speed IS h) AND (rainny IS l)  THEN   reward IS l;
	RULE 20 : IF (speed IS h) AND (rainny IS m)  THEN   reward IS l;
	RULE 21 : IF (speed IS h) AND  (rainny IS h)  THEN   reward IS vl;
	RULE 22 : IF (speed IS m) AND (rainny IS l)  THEN   reward IS l;
        RULE 23 : IF (speed IS m) AND (rainny IS m)  THEN   reward IS l;
	RULE 24 : IF (speed IS m) AND  (rainny IS h)  THEN   reward IS vl;
	RULE 25 : IF (speed IS l) AND (rainny IS l)  THEN   reward IS vh;
	RULE 26 : IF (speed IS l) AND (rainny IS m)  THEN   reward IS h;
	RULE 27 : IF (speed IS l) AND  (rainny IS h)  THEN   reward IS m;
	RULE 28 : IF (speed IS vl) AND (rainny IS l)  THEN   reward IS vh;
	RULE 29 : IF (speed IS vl) AND (rainny IS m)  THEN   reward IS vh;
	RULE 30 : IF (speed IS vl) AND  (rainny IS h)  THEN   reward IS vh;
END_RULEBLOCK

END_FUNCTION_BLOCK